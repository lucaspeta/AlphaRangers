<script type="text/javascript">

/*!
	*speedometer.js
	*author: Manivannan R
	*project: Speedometer
*/
$.fn.speedometer = function (userPref) {
  var self = this;
  this.defaultProperty = {
    maxVal              : 180,         /**Max value of the meter*/
    divFact             : 10,          /**Division value of the meter*/
    dangerLevel         : 120,         /**more than this leval, color will be red*/
    initDeg             : -45,         /**reading begins angle*/
    maxDeg              : 270,         /**total angle of the meter reading*/
    edgeRadius          : 150,         /**radius of the meter circle*/
    speedNobeH          : 4,           /**speed nobe height*/
    speedoNobeW         : 95,          /**speed nobe width*/
    speedoNobeL         : 13,          /**speed nobe left position*/
    indicatorRadius     : 125,         /**radius of indicators position*/
    indicatorNumbRadius : 90,          /**radius of numbers position*/
    speedPositionTxtWH  : 80,          /**speedo-meter current value cont*/
    nobW                : 20,          /**indicator nob width*/
    nobH                : 4,           /**indicator nob height*/
    numbW               : 30,          /**indicator number width*/
    numbH               : 16,          /**indicator number height*/
    midNobW             : 10,          /**indicator mid nob width*/
    midNobH             : 3,           /**indicator mid nob height*/
    noOfSmallDiv        : 2,           /**no of small div between main div*/
    eventListenerType   : 'change',    /**type of event listener*/
    multiplier          : 1,	       /**Center value multiplier e.g. 1 x 1000 RPM*/	
    gagueLabel   	: 'km/h'       /**Label on guage Face*/	
  }
  if(typeof userPref === 'object')
  for (var prop in userPref)this.defaultProperty[prop] = userPref[prop];

  var speedInDeg,
  noOfDev            = this.defaultProperty.maxVal/this.defaultProperty.divFact,
  divDeg             = this.defaultProperty.maxDeg/noOfDev,
  speedBgPosY,
  speedoWH           = this.defaultProperty.edgeRadius*2,
  speedNobeTop       = this.defaultProperty.edgeRadius - this.defaultProperty.speedNobeH/2,
  speedNobeAngle     = this.defaultProperty.initDeg,
  speedPositionTxtTL = this.defaultProperty.edgeRadius - this.defaultProperty.speedPositionTxtWH/2,
  tempDiv       = '',
  induCatorLinesPosY,induCatorLinesPosX,induCatorNumbPosY,induCatorNumbPosX,
  induCatorLinesPosLeft,induCatorLinesPosTop,induCatorNumbPosLeft,induCatorNumbPosTop;

  this.setCssProperty = function(){
    var tempStyleVar = [
      '<style>',
        '#' + this.parentElemId + ' .envelope{',
          'width  :'+ speedoWH + 'px;',
          'height :'+ speedoWH + 'px;',
        '}',
        '#' + this.parentElemId + ' .speedNobe{',
          'height            :'+ this.defaultProperty.speedNobeH + 'px;',
          'top               :'+ speedNobeTop + 'px;',
          'transform         :rotate('+speedNobeAngle+'deg);',
          '-webkit-transform :rotate('+speedNobeAngle+'deg);',
          '-moz-transform    :rotate('+speedNobeAngle+'deg);',
          '-o-transform      :rotate('+speedNobeAngle+'deg);',
        '}',
        '#' + this.parentElemId + ' .speedPosition{',
          'width  :'+this.defaultProperty.speedPositionTxtWH + 'px;',
          'height :'+this.defaultProperty.speedPositionTxtWH + 'px;',
          'top  :'+speedPositionTxtTL + 'px;',
          'left :'+speedPositionTxtTL + 'px;',
        '}',
        '#' + this.parentElemId + ' .speedNobe div{',
          'width  :'+ this.defaultProperty.speedoNobeW + 'px;',
          'left :'+ this.defaultProperty.speedoNobeL + 'px;',
        '}',      
        '#' + this.parentElemId + ' .nob{',
          'width  :'+ this.defaultProperty.nobW + 'px;',
          'height :'+ this.defaultProperty.nobH + 'px;',
        '}',
        '#' + this.parentElemId + ' .numb{',
          'width  :'+ this.defaultProperty.numbW + 'px;',
          'height :'+ this.defaultProperty.numbH + 'px;',
        '}',
        '#' + this.parentElemId + ' .midNob{',
          'width  :'+ this.defaultProperty.midNobW + 'px;',
          'height :'+ this.defaultProperty.midNobH + 'px;',
        '}',
      '</style>',
    ].join('');
    this.parentElem.append(tempStyleVar);    
  }
  this.creatHtmlsElecments = function(){
    this.parentElemId = 'speedometerWraper-' + $(this).attr('id');
    $(this).wrap('<div id="'+ this.parentElemId +'">');
    this.parentElem = $(this).parent();
    this.setCssProperty();
    this.createIndicators();
  }
  this.createIndicators = function(){
    for(var i=0; i<=noOfDev; i++){
      var curDig = this.defaultProperty.initDeg + i*divDeg;
      var curIndVal = i*this.defaultProperty.divFact;
      var dangCls = "";
      if(curIndVal >= this.defaultProperty.dangerLevel){
        dangCls = "danger";
      }   
      var induCatorLinesPosY = this.defaultProperty.indicatorRadius * Math.cos( 0.01746 * curDig);
      var induCatorLinesPosX = this.defaultProperty.indicatorRadius * Math.sin( 0.01746 * curDig);
      
      var induCatorNumbPosY = this.defaultProperty.indicatorNumbRadius * Math.cos( 0.01746 * curDig);
      var induCatorNumbPosX = this.defaultProperty.indicatorNumbRadius * Math.sin( 0.01746 * curDig);
      
      if(i%this.defaultProperty.noOfSmallDiv == 0){
        induCatorLinesPosLeft = (this.defaultProperty.edgeRadius - induCatorLinesPosX )-2;
        induCatorLinesPosTop  = (this.defaultProperty.edgeRadius - induCatorLinesPosY)-10;
        var tempDegInd = [
                  'transform         :rotate('+curDig+'deg)',
                  '-webkit-transform :rotate('+curDig+'deg)',
                  '-o-transform      :rotate('+curDig+'deg)',
                  '-moz-transform    :rotate('+curDig+'deg)',
                ].join(";");
        tempDiv += '<div class="nob '+dangCls+'" style="left:'+induCatorLinesPosTop+'px;top:'+induCatorLinesPosLeft+'px;'+tempDegInd+'"></div>';
        induCatorNumbPosLeft = (this.defaultProperty.edgeRadius - induCatorNumbPosX) - (this.defaultProperty.numbW/2);
        induCatorNumbPosTop  = (this.defaultProperty.edgeRadius - induCatorNumbPosY) - (this.defaultProperty.numbH/2);
        tempDiv += '<div class="numb '+dangCls+'" style="left:'+ induCatorNumbPosTop +'px;top:'+induCatorNumbPosLeft+'px;">'+ curIndVal +'</div>';
      }else{
        induCatorLinesPosLeft = (this.defaultProperty.edgeRadius - induCatorLinesPosX )-(this.defaultProperty.midNobH/2);
        induCatorLinesPosTop = (this.defaultProperty.edgeRadius - induCatorLinesPosY)-(this.defaultProperty.midNobW/2);
        var tempDegInd = [
                  'transform         :rotate('+curDig+'deg)',
                  '-webkit-transform :rotate('+curDig+'deg)',
                  '-o-transform      :rotate('+curDig+'deg)',
                  '-moz-transform    :rotate('+curDig+'deg)',
                ].join(";");
        tempDiv += '<div class="nob '+dangCls+' midNob" style="left:'+induCatorLinesPosTop+'px;top:'+induCatorLinesPosLeft+'px;'+tempDegInd+'"></div>';
        tempDiv += '<div class="numb"></div>';
      }
    }
    this.parentElem.append('<div class="envelope">');
    
    var speedNobe = [
      '<div class="speedNobe">',
        '<div></div>',
      '</div>',
      '<div class="speedPosition"></div>'
    ].join();

    this.parentElem.find(".envelope").append(speedNobe+tempDiv);
  }
  this.changePosition = function (){   
    console.log($(this).val())
    var speed = $(this).val();
    if(speed > self.defaultProperty.maxVal){
      speed = self.defaultProperty.maxVal;
    }
    if(speed < 0 || isNaN(speed)){
      speed = 0;
    }
    speedInDeg = (self.defaultProperty.maxDeg/self.defaultProperty.maxVal)*speed + self.defaultProperty.initDeg;
    
    self.parentElem.find(".speedNobe").css({
      "-webkit-transform" :'rotate('+speedInDeg+'deg)',
      "-webkit-transform" :'rotate('+speedInDeg+'deg)',
      "-moz-transform"    :'rotate('+speedInDeg+'deg)',
      "-o-transform"      :'rotate('+speedInDeg+'deg)'
    });
    
    var centerVal = speed *  self.defaultProperty.multiplier;
    self.parentElem.find(".speedPosition").html(centerVal + "<br />" + self.defaultProperty.gagueLabel );
    
    self.parentElem.find(".envelope .nob,.envelope .numb").removeClass("bright");
    for(var i=0; i<=noOfDev; i++){
      if(speed >= i*self.defaultProperty.divFact){
        self.parentElem.find(".envelope .nob").eq(i).addClass("bright");
        self.parentElem.find(".envelope .numb").eq(i).addClass("bright");
      }else{
        break;
      }
    }
  }
  this.creatHtmlsElecments();
  $(this).bind(this.defaultProperty.eventListenerType,this.changePosition);
  return this;
}
 
$.fn.battery = function(options) {
    var maxVal = 100;
    var settings = $.extend({
        batteryColor: "#61c419",
        backgroundColor: "lightgrey",
        maxWidth: 150,
        textColor: '#fff'
    }, options );


    var element = this;
    this.append(" <div class='bat-border'><div class='batFill'></div></div><div class='bat-ico'></div>");

    function showBattery(currentVal,targetVal)
    {
        var targetWidth = ((settings.maxWidth/maxVal)*targetVal).toFixed(2);
        var currentPercent = ((currentVal/targetVal)*100).toFixed(0);
        var fill = $(".batFill", element);
        fill.width(targetWidth);
        fill.css("background-image", createGradient(settings.batteryColor, settings.backgroundColor, currentPercent));
        var textElement = "<div class='bat-text'>"+currentVal+"%</div>";
        fill.html(textElement);
        $('.bat-text').css("color", settings.textColor);
    }

    function createGradient(primaryColor, secondaryColor, percentage){
        var gradient = "linear-gradient(to right, {primaryColor} 0%, {primaryColor} {percentage}%, {secondaryColor} {percentage}% , {secondaryColor} 100%)";
        gradient = replace(gradient, "{primaryColor}", primaryColor);
        gradient = replace(gradient, "{secondaryColor}", secondaryColor);
        gradient = replace(gradient, "{percentage}", percentage);
        return gradient;
    }

    function replace(text, what, value){
        return text.replace(new RegExp(what, 'g'), value);
    }

    var update  = function(value) {
        showBattery(value, maxVal);
        return element;
    }
    showBattery(40,maxVal);
    return {
        Update: update
    }
 
    };

$.fn.tempGauge = function(options) {
		var opts = $.extend({}, $.fn.tempGauge.defaults, options),
		padding = opts.borderWidth;			
		
		var gauges = [];
		
		this.each(function(idx, item){
			gauges.push(createTempGauge(item));
		});
		
		return $(gauges);
		
		function createTempGauge(gauge){
			
			var canvas = document.createElement("canvas"),
				ctx = canvas.getContext("2d"),
				currentTempText = $(gauge).text(),
				currentTemp = (( parseFloat(currentTempText) + 0.000001) || opts.defaultTemp).toFixed(1);

			canvas.width = opts.width;
			canvas.height = opts.width * 2 + opts.labelSize;

			if(opts.replaceHtml){
				$(gauge).replaceWith(canvas);
			}else{
				$(gauge).html(canvas);
			}

			var percentage = calculatePercentage(currentTemp, opts.minTemp, opts.maxTemp - opts.minTemp);

			ctx.lineWidth = opts.borderWidth;
			ctx.strokeStyle = opts.borderColor;
			ctx.fillStyle = opts.fillColor;
			ctx.font = "bold " + opts.labelSize + "px Arial ";
			ctx.textAlign = "center";
			
			fillTempGauge(ctx, 5, padding + padding, opts.width, opts.width * 2 - padding * 6, percentage);
			strokeTempGauge(ctx, 5, padding + padding, opts.width, opts.width * 2 - padding * 6);
			if (opts.showLabel) {
				drawLabel(ctx, canvas.width / 2, canvas.height - opts.labelSize / 5, currentTempText);
			}

			if(opts.showScale) {
				drawScale(ctx, 0, padding * 2, opts.width, opts.width * 2 - padding, 0, percentage, opts.maxTemp, opts.minTemp);
			}

			return canvas;
		}
		
		function drawScale(ctx, x, y, width, height, spacing, fillPercent, maxTemp, minTemp) {
			var longScale = 14, shortScale = 7;
			var o = calculateDrawArgs(x, y, width, height, spacing, fillPercent);
			var maxLength = height - o.offset - o.big.radius - o.small.radius;
			ctx.moveTo(x, y);
			ctx.lineTo(x, maxLength);
			ctx.stroke();

			var drawScaleLine = function (x, y, scaleLength) {
				ctx.moveTo(x, y);
				ctx.lineTo(x + scaleLength, y);
				ctx.stroke();
			};

			var delta = (maxLength + 0.001) / 10;
			for (var i = 0; i < 11; i++) {
				if (i % 2 === 0) {
					drawScaleLine(x, y + delta * i, longScale);
					drawLabel(ctx, x + longScale + 14, y + delta * i + 6, (maxTemp - (maxTemp - minTemp) * i/10).toString());
				} else {
					drawScaleLine(x, y + delta * i, shortScale);
					drawLabel(ctx, x + longScale + 14, y + delta * i + 6, (maxTemp - (maxTemp - minTemp) * i/10).toString());
				}
			}
		}

		function calculatePercentage(temp, mintemp, length){
			var percentage = (temp - mintemp)/ length;
			percentage = percentage > 1 ? 1 : percentage;
			percentage = percentage < 0 ? 0 : percentage;
			return percentage;
		}

		function calculateDrawArgs(x, y, width, height, spacing, fillPercent){

			var wholeCircle = Math.PI * 2;
			var smallRadius = width / 3 / 2 - spacing;
			var xSmall = x + width / 2;
			var ySmall = y + smallRadius + spacing;
			
			var bigRadius = height / 6 - spacing;
			var xBig = x + width / 2;
			var yBig = y + height / 6 * 5;
			
			var offSet = Math.sqrt((Math.pow(bigRadius, 2) - Math.pow(smallRadius / 2, 2)), 2);
			var twoThirdsLength = height / 6 * 5 - offSet - width / 3 / 2;

			var gauge = twoThirdsLength * fillPercent;
			
			var yBox = yBig - offSet - gauge;
			var xBox = xBig - width / 6 + spacing;
			var sRad = Math.asin(smallRadius / bigRadius);

			return {
				small : {x : xSmall, y : ySmall, radius : smallRadius},
				big : {x : xBig, y: yBig, radius : bigRadius},
				box : {x : xBox, y : yBox},
				offset : offSet,
				gauge : gauge,
				sRad : sRad,
				wholeCircle : wholeCircle
			};
		}
		
		function drawTemperatureGauge(ctx, x, y, width, height, spacing, fillPercent) {
			var o = calculateDrawArgs(x, y, width, height, spacing, fillPercent);
			ctx.beginPath();
			ctx.arc(o.small.x, o.box.y, o.small.radius, 0, o.wholeCircle * -0.5, true);
			ctx.arc(o.big.x, o.big.y, o.big.radius, o.wholeCircle * 0.75 - o.sRad, o.wholeCircle * -0.25 + o.sRad, true);
			ctx.closePath();
		}
		
		function strokeTempGauge(ctx, x, y, width, height){
			drawTemperatureGauge(ctx, x, y, width, height, 0, 1);
			ctx.stroke();
		}
		
		function fillTempGauge(ctx, x, y, width, height, percent){
			drawTemperatureGauge(ctx, x, y, width, height,  opts.borderWidth, percent);
			ctx.fill();
		}

		function drawLabel(ctx, x, y, text){
			ctx.fillStyle = opts.labelColor;
			ctx.fillText(text, x , y );
		}
	};
	
	$.fn.tempGauge.defaults = {
		borderColor: "black",
		borderWidth: 4,
		defaultTemp: 26,
		fillColor: "red",
		labelSize: 12,
		labelColor: "black",
		maxTemp: 40,
		minTemp: -10,
		showLabel: false,
		width: 100,
		showScale: false,
		replaceHtml: true
	};
</script>